---

- name: Run Bootstrap Net CloudFormation Stack
  cloudformation:
    stack_name: "{{ stacks.network }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: present
    template: "../cfn/bootstrap-private-network.yaml"
    template_format: yaml
    template_parameters:
      StackName : "{{ bootstrap.StackName }}"
      WebSubnet1CIDR : "{{ bootstrap.WebSubnet1CIDR }}"
      WebSubnet2CIDR : "{{ bootstrap.WebSubnet2CIDR }}"
      AppSubnet1CIDR : "{{ bootstrap.AppSubnet1CIDR }}"
      AppSubnet2CIDR : "{{ bootstrap.AppSubnet2CIDR }}"
      DataSubnet1CIDR : "{{ bootstrap.DataSubnet1CIDR }}"
      DataSubnet2CIDR : "{{ bootstrap.DataSubnet2CIDR }}"
      VpcCIDR : "{{ bootstrap.VpcCidrBlock }}"
      InstanceType : "{{ bootstrap.InstanceType }}"
      ImageId : "{{ bootstrap.AMI }}"
      KeyName : "{{ bootstrap.KeyPairName }}"
  register: BootstrapNetStack
  when: stack_action == "create" or stack_action == "create-web"or stack_action == "create-app" or stack_action == "create-db" or stack_action == "create-eip" or stack_action == "create-network"

# - name: Run DB Instance Creation CloudFormation Stack
#   cloudformation:
#     stack_name: "{{ stacks.db }}"
#     region: "{{ lookup('env', 'AWS_REGION') }}"
#     aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
#     aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
#     state: present
#     template: "../cfn/bootstrap-db.yaml"
#     template_parameters:
#       StackName : "{{ bootstrap.StackName }}"
#       DBName : "{{ bootstrap.DBName }}"
#       DatabaseSecurityGroup : "{{ BootstrapNetStack.stack_outputs.DataNetSecurityGroup }}"
#       DataSubnets : "{{ BootstrapNetStack.stack_outputs.DataSubnets }}"
#       DBMasterUserPassword : "{{ bootstrap.DBMasterUserPassword }}"
#       DBMasterUsername : "{{ bootstrap.DBMasterUsername }}"
#   register: DbInstanceStack
#   when: stack_action == "create" or stack_action == "create-db"

# - name: Run DB Instance Creation CloudFormation Stack
#   cloudformation:
#     stack_name: "{{ stacks.db }}"
#     region: "{{ lookup('env', 'AWS_REGION') }}"
#     aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
#     aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
#     state: present
#     template: "../cfn/bootstrap-dynamodb.yaml"
#     template_parameters:
#       StackName : "{{ bootstrap.StackName }}"
#       DBName : "{{ bootstrap.DBName }}"
#   register: DbInstanceStack
#   when: stack_action == "create" or stack_action == "create-db"


- name: Run DB Instance Creation CloudFormation Stack
  cloudformation:
    stack_name: "{{ stacks.db }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: present
    template: "../cfn/bootstrap-docdb.yaml"
    template_parameters:
      StackName : "{{ bootstrap.StackName }}"
      DBName : "{{ bootstrap.DBName }}"
      DatabaseSecurityGroup : "{{ BootstrapNetStack.stack_outputs.DataNetSecurityGroup }}"
      DataSubnets : "{{ BootstrapNetStack.stack_outputs.DataSubnets }}"
      DBMasterUserPassword : "{{ bootstrap.DBMasterUserPassword }}"
      DBMasterUsername : "{{ bootstrap.DBMasterUsername }}"
      DBPort: "{{ bootstrap.DBPort }}"
      DBClusterName: "{{ bootstrap.DBClusterName }}"
  register: DbInstanceStack
  when: stack_action == "create" or stack_action == "create-db"

- name: Run App Instance Creation CloudFormation Stack
  cloudformation:
    stack_name: "{{ stacks.app }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: present
    template: "../cfn/bootstrap-app.yaml"
    template_parameters:
      StackName : "{{ bootstrap.StackName }}"
      ElbSecurityGroup: "{{ BootstrapNetStack.stack_outputs.AppNetElbSecurityGroup }}"
      InstanceSecurityGroup : "{{ BootstrapNetStack.stack_outputs.AppNetSecurityGroup }}"
      AppSubnets : "{{ BootstrapNetStack.stack_outputs.AppSubnets }}"
      InstanceType : "{{ bootstrap.InstanceType }}"
      ImageId : "{{ bootstrap.AMI }}"
      KeyName : "{{ bootstrap.KeyPairName }}"
      LogGroup: "{{ BootstrapNetStack.stack_outputs.AppServerLogGroup }}"
      DBMasterUserPassword : "{{ bootstrap.DBMasterUserPassword }}"
      DBMasterUsername : "{{ bootstrap.DBMasterUsername }}"
      DBPort: "{{ bootstrap.DBPort }}"
      DBClusterEndpoint : "{{ DbInstanceStack.stack_outputs.ClusterEndpoint }}"
  register: AppInstanceStack
  when: stack_action == "create" or stack_action == "create-app"

- name: Run Web Instance Creation CloudFormation Stack
  cloudformation:
    stack_name: "{{ stacks.web }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: present
    template: "../cfn/bootstrap-web.yaml"
    template_parameters:
      StackName : "{{ bootstrap.StackName }}"
      ElbSecurityGroup : "{{ BootstrapNetStack.stack_outputs.WebNetElbSecurityGroup }}"
      InstanceSecurityGroup : "{{ BootstrapNetStack.stack_outputs.WebNetSecurityGroup }}"
      WebSubnets : "{{ BootstrapNetStack.stack_outputs.WebSubnets }}"
      InstanceType : "{{ bootstrap.InstanceType }}"
      ImageId : "{{ bootstrap.AMI }}"
      KeyName : "{{ bootstrap.KeyPairName }}"
      LogGroup: "{{ BootstrapNetStack.stack_outputs.WebServerLogGroup }}"
      AppElbUrl: "{{ AppInstanceStack.stack_outputs.URL }}"
  register: WebInstanceStack
  when: stack_action == "create" or stack_action == "create-web"

- name: Remove Web Instance Stack
  cloudformation:
    stack_name: "{{ stacks.web }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: absent
    template: "../cfn/bootstrap-web.yaml"
  when: stack_action == "delete" or stack_action == "delete-web"
 
- name: Remove App Instance Stack
  cloudformation:
    stack_name: "{{ stacks.app }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: absent
    template: "../cfn/bootstrap-app.yaml"
  when: stack_action == "delete" or stack_action == "delete-app"

- name: Remove Data Instance Stack
  cloudformation:
    stack_name: "{{ stacks.db }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: absent
    template: "../cfn/bootstrap-docdb.yaml"
  when: stack_action == "delete" or stack_action == "delete-db"

- name: Remove Bootstrap Net CloudFormation Stack
  cloudformation:
    stack_name: "{{ stacks.network }}"
    region: "{{ lookup('env', 'AWS_REGION') }}"
    aws_access_key: "{{ lookup('env', 'AWS_ACCESS_KEY') }}"
    aws_secret_key: "{{ lookup('env', 'AWS_SECRET_KEY') }}"
    state: absent
    template: "../cfn/bootstrap-private-network.yaml"
  when: stack_action == "delete"