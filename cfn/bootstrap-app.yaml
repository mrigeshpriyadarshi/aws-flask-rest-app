---
AWSTemplateFormatVersion: '2010-09-09'
Description: AWS CloudFormation AutoScalingMultiAZ

Parameters:
  StackName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: m1.medium

  ImageId:
    Description: WebServer EC2 Image Id
    Type: String

  ElbSecurityGroup:
    Description: WebServer ELB SecurityGroups
    Type: String

  AppSubnets:
    Description: App Subnets
    Type: String

  InstanceSecurityGroup:
    Description: WebServer EC2 SecurityGroups
    Type: String

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: AppServerLogGroup
      RetentionInDays: 30

  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      Scheme: internal
      SecurityGroups:
        - Ref: ElbSecurityGroup
      Subnets:
        Fn::Split:
          - ","
          - Ref: AppSubnets
      CrossZone: 'true'
      Listeners:
      - LoadBalancerPort: '80'
        InstancePort: '80'
        Protocol: TCP
      - LoadBalancerPort: '443'
        InstancePort: '443'
        Protocol: TCP
      HealthCheck:
        Target: TCP:22
        HealthyThreshold: '3'
        UnhealthyThreshold: '5'
        Interval: '10'
        Timeout: '5'
      Tags:
        - Key: Appname
          Value: !Ref StackName

  WebServerGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      Cooldown: 600
      HealthCheckGracePeriod: 900
      HealthCheckType: EC2
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
          - GroupMinSize
          - GroupMaxSize
          - GroupInServiceInstances
      LaunchConfigurationName:
        Ref: LaunchConfig
      MinSize: '1'
      MaxSize: '2'
      DesiredCapacity: '1'
      VPCZoneIdentifier:
        Fn::Split:
          - ","
          - Ref: AppSubnets
      LoadBalancerNames:
      - Ref: ElasticLoadBalancer
      Tags:
        - Key: Appname
          Value: !Ref StackName
          PropagateAtLaunch: 'true'
        - Key: Name
          Value:
            Fn::Join:
            - '-'
            - - Ref: StackName
              - App
              - Instance
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: '1'
        MaxBatchSize: '1'
        PauseTime: PT15M
        WaitOnResourceSignals: 'true'



  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      Comment: Install a simple application
      AWS::CloudFormation::Init:
        configSets:
          default:
            - install_base
        install_base:
          packages:
            yum:
              httpd: []
              httpd-tools: []
              mod_wsgi: []
              wget: []
              unzip: []
              nmap-ncat: []
              git: []
              mod_http2: []
              apr: []
              apr-util: []
              awslogs: []
          files:
            /etc/httpd/conf.d/flask.conf:
              content: !Sub |

                <VirtualHost *:80>
                        ServerName api.example.com

                        WSGIScriptAlias / /var/www/rest-app/deploy.wsgi
                        AddType text/html .py

                        <directory /var/www/rest-app>
                                WSGIProcessGroup webtool
                                WSGIApplicationGroup %{GLOBAL}
                                WSGIScriptReloading On
                                Order deny,allow
                                Allow from all
                        </directory>
                </VirtualHost>
                <VirtualHost *:443>
                        ServerName api.example.com

                        WSGIScriptAlias / /var/www/rest-app/deploy.wsgi
                        AddType text/html .py

                        <directory /var/www/rest-app>
                                WSGIProcessGroup webtool
                                WSGIApplicationGroup %{GLOBAL}
                                WSGIScriptReloading On
                                Order deny,allow
                                Allow from all
                        </directory>
                </VirtualHost>
              mode: '000644'
              owner: root
              group: root

            /var/www/rest-app/deploy.wsgi:
              content: !Sub |
                import os
                import sys
                import site

                # Add virtualenv site packages
                site.addsitedir(os.path.join(os.path.dirname(__file__),     'env/local/lib64/python2.7/site-packages'))

                # Path of execution
                sys.path.append('/var/www/rest-app')

                # # Fired up virtualenv before include application
                # activate_env = os.path.expanduser(os.path.join(os.path.dirname(__file__), 'env/bin/activate_this.py'))
                # execfile(activate_env, dict(__file__=activate_env))

                # import my_flask_app as application
                from app import app as application
              mode: '000644'
              owner: root
              group: root

            /var/www/html/index.html:
              content: !Sub |
                "It Works!!"
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awslogs.conf:
              content: !Sub |
                [general]
                state_file = /var/lib/awslogs/agent-state

                [/var/log/messages]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/messages
                buffer_duration = 5000
                log_stream_name = {instance_id}-var-log-messages
                initial_position = start_of_file
                log_group_name = ${LogGroup}

                [/var/log/cfn-init.log]
                datetime_format = %b %d %H:%M:%S
                file = /var/log/cfn-init.log
                buffer_duration = 5000
                log_stream_name = {instance_id}-var-log-cfn-init-log
                initial_position = start_of_file
                log_group_name = ${LogGroup}
              mode: '000644'
              owner: root
              group: root
            /etc/awslogs/awscli.conf:
              content: !Sub |
                [plugins]
                cwslogs=cwslogs
                [default]
                region=${AWS::Region}
              mode: '000600'
              owner: root
              group: root

            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource LaunchConfig --region ${AWS::Region}
                runas=root
          services:
            sysvinit:
              httpd:
                enabled: 'true'
                ensureRunning: 'true'
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - "/etc/cfn/cfn-hup.conf"
                - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
              awslogsd:
                enabled: 'true'
                ensureRunning: 'true'

    Properties:
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: ImageId
      SecurityGroups:
      - Ref: InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -ex
          signal () {
            EXIT_CODE=$?
            [ $EXIT_CODE -eq 0 ] || echo "=== Userdata FAILED ==="
            /opt/aws/bin/cfn-signal -e $EXIT_CODE --stack ${AWS::StackName} --resource WebServerGroup --region ${AWS::Region}
          }

          echo "=== Userdata Begin ==="

          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource LaunchConfig --region ${AWS::Region}
          # useradd www
          # groupadd www
          usermod -a -G www ec2-user
          chown -R root:www /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec sudo chmod 2775 {} \;
          find /var/www -type f -exec sudo chmod 0664 {} \;
          easy_install pip
          pip install flask
          cd /tmp
          git clone https://github.com/mrigeshpriyadarshi/flaskapp-mysql.git
          cp -r flaskapp-mysql/* /var/www/rest-app/
          sudo service httpd restart 
          echo "=== Userdata End ==="

  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: '1'

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: WebServerGroup
      Cooldown: '60'
      ScalingAdjustment: "-1"

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '90'
      AlarmActions:
      - Ref: WebServerScaleUpPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: '300'
      EvaluationPeriods: '2'
      Threshold: '70'
      AlarmActions:
      - Ref: WebServerScaleDownPolicy
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          Ref: WebServerGroup
      ComparisonOperator: LessThanThreshold

Outputs:
  URL:
    Description: The URL of the website
    Value:
      Fn::Join:
      - ''
      - - https://
        - Fn::GetAtt:
          - ElasticLoadBalancer
          - DNSName
